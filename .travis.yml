dist: trusty
language: rust
services: docker
sudo: required

rust: stable

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

env:
  global:
    - secure: eYvJL9qSyPPcopyquSMWVjNI7svMuTqqjRTGDXlyN3fcYMUraWV69qJBVRmSuMIo6KvGnKWZz8Ari7+fq8RybQteVaaQS+PrlwVnjJidB8ELq3wDDKD7bj9iRIjOyfwYUe3oEN4Y+XYOwyICBDq7bC6vIf9OIlhZg9jQ+tweXKKPEjQ68+MIhUDXbH8VPYd4SREsmE6q9zPTJ54l5cBmZDED0QF5RWgrt9Gn8pgW+u2utYcT/0iJnf//WLb2nCxfzATkVQFnyTni+RJnngBJ7KDZR2qlpOxdoV6iax0I6SXwx2TIxNUyLhmFomFrIkIjHjlQRq+NBKy/ehUK4TvpRxWWMgCzTxrd3STCeFR+HnDbspMAUzlnBGdMrxPH3LCj9KgkekaJMZ29ryZYCtaFnO58FiTUBreNDWibcWRqXmwhbMzWT6pLRzuYjYH0jIm5WjnleKTznpN4Me5VMVUBpzdAPs0VKvhGavJn4bT/5W1dhFmhuNlD5kCdkjD5oZI74MyxepTr4Bg0wo3bLSjfmyq77Qxvo9HcVxhukBAIwvILElWL5UK+dguEJWP/iqtbfwxfa7tTOrIF3GTfL3fSfI2B/pAUzGnzWzFaZWU357NEDZOCXACoUEhG3JYNwR6//YvJaXBVoQHAq+ZSd4oEyrAnaDjnBJr1CBfWVTpyfFI=
    - CRATE_NAME=porteurbars
    - TARGET=x86_64-unknown-linux-musl
    - OS=Linux
    - ARCH=x86_64

matrix:
  include:
    - env: TARGET=x86_64-apple-darwin OS=Darwin ARCH=x86_64
      os: osx
    - env: TARGET=x86_64-unknown-linux-musl OS=Linux ARCH=x86_64

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

before_install:
  # install kcov
  - >
    if [ ! -d "$HOME/.kcov/bin" ]; then
      wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
      tar xzf master.tar.gz && mkdir kcov-master/build && cd kcov-master/build &&
      cmake -DCMAKE_INSTALL_PREFIX:PATH=$HOME/.kcov .. && make && make install && cd ../..
    fi
  - export PATH=$HOME/.kcov/bin:$PATH

cache:
  cargo: true
  apt: true
  directories:
  - target/debug/deps
  - target/debug/build
  - "$HOME/.rustup"
  - "$HOME/.kcov"

addons:
  apt:
    packages:
    - libcurl4-openssl-dev
    - libelf-dev
    - libdw-dev
    - binutils-dev
    - libiberty-dev

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  # TODO update `api_key.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it: `travis encrypt GH_TOKEN=0123456789012345678901234567890123456789`
  # - Paste the output down here
  api_key:
    secure: $GH_TOKEN
  file_glob: true
  file: $CRATE_NAME-$OS-$ARCH.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

after_success:
  - '[ $TRAVIS_EVENT_TYPE != "cron" ] &&
    [ $TRAVIS_RUST_VERSION = stable ] &&
    [ $TRAVIS_BRANCH = master ] &&
    [ $TRAVIS_PULL_REQUEST = false ] &&
    (ls target/debug &&
    RUSTFLAGS="-C link-dead-code" cargo test --no-run &&
    for file in target/debug/porteurbars-*; do
       if [[ "${file: -2}" != ".d" ]]; then
         mkdir -p "target/cov/$(basename $file)";
         kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file";
       fi;
    done &&
    kcov --coveralls-id=$COVERALLS_REPO_TOKEN --merge target/cov target/cov/* &&
    echo "covered") || true'
  - '[ $TRAVIS_RUST_VERSION = stable ] &&
    [ $TRAVIS_BRANCH = master ] &&
    [ $TRAVIS_PULL_REQUEST = false ]
    && cargo doc --no-deps &&
    echo "<meta http-equiv=refresh content=0;url=`echo $TRAVIS_REPO_SLUG | cut -d / -f 2`/index.html>" > target/doc/index.html &&
    pip install --user ghp-import &&
    /home/travis/.local/bin/ghp-import -n target/doc &&
    git push -fq https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages &&
    echo "documented"'